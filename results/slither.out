
INFO:Detectors:
Vault._divRoundUp(uint256,uint256) (src/Vault.sol#238-242) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor
	- IncorrectEventSignatureInLibraries
	- ABIEncoderV2PackedStorage.
It is used by:
	- >=0.5.0 (lib/forge-std/lib/ds-test/src/test.sol#16)
	- >=0.5.0 (lib/v2-core/contracts/interfaces/IERC20.sol#1)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)
	- >=0.5.0 (lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)
	- >=0.5.0 (src/libraries/UniswapPoolAddress.sol#2)
Version constraint >=0.6.2<0.9.0 is too complex.
It is used by:
	- >=0.6.2<0.9.0 (lib/forge-std/src/Base.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdAssertions.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdChains.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdCheats.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdError.sol#3)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdInvariant.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdMath.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdStorage.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/StdUtils.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/Test.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/Vm.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/interfaces/IMulticall3.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/mocks/MockERC20.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/mocks/MockERC721.sol#2)
	- >=0.6.2<0.9.0 (lib/forge-std/src/safeconsole.sol#2)
Version constraint >=0.6.0<0.9.0 is too complex.
It is used by:
	- >=0.6.0<0.9.0 (lib/forge-std/src/StdJson.sol#2)
Version constraint >=0.4.22<0.9.0 is too complex.
It is used by:
	- >=0.4.22<0.9.0 (lib/forge-std/src/StdStyle.sol#2)
	- >=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)
	- >=0.4.22<0.9.0 (lib/forge-std/src/console2.sol#2)
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol#4)
	- ^0.8.0 (lib/uniswap-openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (src/Oracle.sol#2)
	- ^0.8.0 (src/Owned.sol#3)
	- ^0.8.0 (src/SIR.sol#2)
	- ^0.8.0 (src/SystemControl.sol#2)
	- ^0.8.0 (src/SystemControlAccess.sol#2)
	- ^0.8.0 (src/SystemState.sol#2)
	- ^0.8.0 (src/Vault.sol#2)
	- ^0.8.0 (src/interfaces/IWETH9.sol#2)
	- ^0.8.0 (src/libraries/Addresses.sol#2)
	- ^0.8.0 (src/libraries/Contributors.sol#2)
	- ^0.8.0 (src/libraries/Fees.sol#2)
	- ^0.8.0 (src/libraries/FullMath.sol#2)
	- ^0.8.0 (src/libraries/SaltedAddress.sol#2)
	- ^0.8.0 (src/libraries/SirStructs.sol#2)
	- ^0.8.0 (src/libraries/SystemConstants.sol#2)
	- ^0.8.0 (src/libraries/TickMathPrecision.sol#2)
	- ^0.8.0 (src/libraries/VaultExternal.sol#2)
Version constraint >=0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- >=0.8.0 (lib/solmate/src/tokens/ERC1155.sol#2)
	- >=0.8.0 (src/APE.sol#2)
	- >=0.8.0 (src/Staker.sol#2)
	- >=0.8.0 (src/TEA.sol#2)
Version constraint ^0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- ^0.8.4 (src/interfaces/IAPE.sol#2)
	- ^0.8.4 (src/interfaces/IOracle.sol#2)
	- ^0.8.4 (src/interfaces/ISIR.sol#2)
	- ^0.8.4 (src/interfaces/ISystemControl.sol#2)
	- ^0.8.4 (src/interfaces/IVault.sol#2)
Version constraint >=0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- >=0.6.0 (src/libraries/TransferHelper.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in DSTest.failed() (lib/forge-std/lib/ds-test/src/test.sol#47-63):
	- (None,retdata) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(load(address,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed)))) (lib/forge-std/lib/ds-test/src/test.sol#53-58)
Low level call in DSTest.fail() (lib/forge-std/lib/ds-test/src/test.sol#65-76):
	- (status,None) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
Low level call in StdAssertions.assertEqCall(address,bytes,address,bytes,bool) (lib/forge-std/src/StdAssertions.sol#344-375):
	- (successA,returnDataA) = address(targetA).call(callDataA) (lib/forge-std/src/StdAssertions.sol#351)
	- (successB,returnDataB) = address(targetB).call(callDataB) (lib/forge-std/src/StdAssertions.sol#352)
Low level call in StdCheatsSafe.assumeNotBlacklisted(address,address) (lib/forge-std/src/StdCheats.sol#209-227):
	- (success,returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87,addr)) (lib/forge-std/src/StdCheats.sol#221)
	- (success,returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060,addr)) (lib/forge-std/src/StdCheats.sol#225)
Low level call in StdCheatsSafe._isPayable(address) (lib/forge-std/src/StdCheats.sol#284-300):
	- (success,None) = address(addr).call{value: 1}() (lib/forge-std/src/StdCheats.sol#293)
Low level call in StdCheats.deal(address,address,uint256,bool) (lib/forge-std/src/StdCheats.sol#728-747):
	- (None,balData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to)) (lib/forge-std/src/StdCheats.sol#730)
	- (None,totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd)) (lib/forge-std/src/StdCheats.sol#738)
Low level call in StdCheats.dealERC1155(address,address,uint256,uint256,bool) (lib/forge-std/src/StdCheats.sol#749-772):
	- (None,balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e,to,id)) (lib/forge-std/src/StdCheats.sol#751)
	- (None,totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039,id)) (lib/forge-std/src/StdCheats.sol#759)
Low level call in StdCheats.dealERC721(address,address,uint256) (lib/forge-std/src/StdCheats.sol#774-794):
	- (successMinted,ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e,id)) (lib/forge-std/src/StdCheats.sol#776)
	- (None,fromBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,abi.decode(ownerData,(address)))) (lib/forge-std/src/StdCheats.sol#780-781)
	- (None,toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231,to)) (lib/forge-std/src/StdCheats.sol#785)
Low level call in StdCheats.deployCodeTo(string,bytes,uint256,address) (lib/forge-std/src/StdCheats.sol#804-810):
	- (success,runtimeBytecode) = where.call{value: value}() (lib/forge-std/src/StdCheats.sol#807)
Low level call in StdCheats.console2_log_StdCheats(string) (lib/forge-std/src/StdCheats.sol#813-816):
	- (status,None) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(log(string),p0)) (lib/forge-std/src/StdCheats.sol#814)
Low level call in stdStorageSafe.find(StdStorage) (lib/forge-std/src/StdStorage.sol#32-109):
	- (None,rdat) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#46)
	- (success,rdat_scope_0) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#80)
Low level call in stdStorage.checked_write(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#294-324):
	- (None,rdat) = who.staticcall(cald) (lib/forge-std/src/StdStorage.sol#308)
Low level call in Staker._payAuctionWinner(address,SirStructs.Auction) (src/Staker.sol#470-502):
	- (success,data) = token.call(abi.encodeWithSignature(balanceOf(address),address(this))) (src/Staker.sol#481)
	- (success,data) = token.call(abi.encodeWithSignature(transfer(address,uint256),auction.bidder,tokenAmount)) (src/Staker.sol#493)
Low level call in Vault.withdrawToSaveSystem(address[],address) (src/Vault.sol#389-414):
	- (success,data) = tokens[i].call(abi.encodeWithSelector(IERC20.balanceOf.selector,address(this))) (src/Vault.sol#398)
	- (success,data) = tokens[i].call(abi.encodeWithSelector(IERC20.transfer.selector,to,amounts[i])) (src/Vault.sol#405)
Low level call in TransferHelper.safeTransferFrom(address,address,address,uint256) (src/libraries/TransferHelper.sol#14-19):
	- (success,data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (src/libraries/TransferHelper.sol#15-17)
Low level call in TransferHelper.safeTransfer(address,address,uint256) (src/libraries/TransferHelper.sol#26-29):
	- (success,data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (src/libraries/TransferHelper.sol#27)
Low level call in TransferHelper.safeApprove(address,address,uint256) (src/libraries/TransferHelper.sol#36-39):
	- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (src/libraries/TransferHelper.sol#37)
Low level call in TransferHelper.safeTransferETH(address,uint256) (src/libraries/TransferHelper.sol#45-48):
	- (success,None) = to.call{value: value}(new bytes(0)) (src/libraries/TransferHelper.sol#46)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Event DSTest.log(string) (lib/forge-std/lib/ds-test/src/test.sol#19) is not in CapWords
Event DSTest.logs(bytes) (lib/forge-std/lib/ds-test/src/test.sol#20) is not in CapWords
Event DSTest.log_address(address) (lib/forge-std/lib/ds-test/src/test.sol#22) is not in CapWords
Event DSTest.log_bytes32(bytes32) (lib/forge-std/lib/ds-test/src/test.sol#23) is not in CapWords
Event DSTest.log_int(int256) (lib/forge-std/lib/ds-test/src/test.sol#24) is not in CapWords
Event DSTest.log_uint(uint256) (lib/forge-std/lib/ds-test/src/test.sol#25) is not in CapWords
Event DSTest.log_bytes(bytes) (lib/forge-std/lib/ds-test/src/test.sol#26) is not in CapWords
Event DSTest.log_string(string) (lib/forge-std/lib/ds-test/src/test.sol#27) is not in CapWords
Event DSTest.log_named_address(string,address) (lib/forge-std/lib/ds-test/src/test.sol#29) is not in CapWords
Event DSTest.log_named_bytes32(string,bytes32) (lib/forge-std/lib/ds-test/src/test.sol#30) is not in CapWords
Event DSTest.log_named_decimal_int(string,int256,uint256) (lib/forge-std/lib/ds-test/src/test.sol#31) is not in CapWords
Event DSTest.log_named_decimal_uint(string,uint256,uint256) (lib/forge-std/lib/ds-test/src/test.sol#32) is not in CapWords
Event DSTest.log_named_int(string,int256) (lib/forge-std/lib/ds-test/src/test.sol#33) is not in CapWords
Event DSTest.log_named_uint(string,uint256) (lib/forge-std/lib/ds-test/src/test.sol#34) is not in CapWords
Event DSTest.log_named_bytes(string,bytes) (lib/forge-std/lib/ds-test/src/test.sol#35) is not in CapWords
Event DSTest.log_named_string(string,string) (lib/forge-std/lib/ds-test/src/test.sol#36) is not in CapWords
Variable DSTest.IS_TEST (lib/forge-std/lib/ds-test/src/test.sol#38) is not in mixedCase
Modifier DSTest.logs_gas() (lib/forge-std/lib/ds-test/src/test.sol#86-91) is not in mixedCase
Constant CommonBase.vm (lib/forge-std/src/Base.sol#27) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ScriptBase.vmSafe (lib/forge-std/src/Base.sol#34) is not in UPPER_CASE_WITH_UNDERSCORES
Event StdAssertions.log_array(uint256[]) (lib/forge-std/src/StdAssertions.sol#8) is not in CapWords
Event StdAssertions.log_array(int256[]) (lib/forge-std/src/StdAssertions.sol#9) is not in CapWords
Event StdAssertions.log_array(address[]) (lib/forge-std/src/StdAssertions.sol#10) is not in CapWords
Event StdAssertions.log_named_array(string,uint256[]) (lib/forge-std/src/StdAssertions.sol#11) is not in CapWords
Event StdAssertions.log_named_array(string,int256[]) (lib/forge-std/src/StdAssertions.sol#12) is not in CapWords
Event StdAssertions.log_named_array(string,address[]) (lib/forge-std/src/StdAssertions.sol#13) is not in CapWords
Constant StdChains.vm (lib/forge-std/src/StdChains.sol#35) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StdCheatsSafe.vm (lib/forge-std/src/StdCheats.sol#11) is not in UPPER_CASE_WITH_UNDERSCORES
Function StdCheats.console2_log_StdCheats(string) (lib/forge-std/src/StdCheats.sol#813-816) is not in mixedCase
Constant StdCheats.vm (lib/forge-std/src/StdCheats.sol#643) is not in UPPER_CASE_WITH_UNDERSCORES
Contract stdError (lib/forge-std/src/StdError.sol#5-15) is not in CapWords
Contract stdJson (lib/forge-std/src/StdJson.sol#29-183) is not in CapWords
Constant stdJson.vm (lib/forge-std/src/StdJson.sol#30) is not in UPPER_CASE_WITH_UNDERSCORES
Contract stdMath (lib/forge-std/src/StdMath.sol#4-43) is not in CapWords
Contract stdStorageSafe (lib/forge-std/src/StdStorage.sol#16-232) is not in CapWords
Event stdStorageSafe.WARNING_UninitedSlot(address,uint256) (lib/forge-std/src/StdStorage.sol#18) is not in CapWords
Parameter stdStorageSafe.target(StdStorage,address)._target (lib/forge-std/src/StdStorage.sol#111) is not in mixedCase
Parameter stdStorageSafe.sig(StdStorage,bytes4)._sig (lib/forge-std/src/StdStorage.sol#116) is not in mixedCase
Parameter stdStorageSafe.sig(StdStorage,string)._sig (lib/forge-std/src/StdStorage.sol#121) is not in mixedCase
Function stdStorageSafe.with_key(StdStorage,address) (lib/forge-std/src/StdStorage.sol#126-129) is not in mixedCase
Function stdStorageSafe.with_key(StdStorage,uint256) (lib/forge-std/src/StdStorage.sol#131-134) is not in mixedCase
Function stdStorageSafe.with_key(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#136-139) is not in mixedCase
Parameter stdStorageSafe.depth(StdStorage,uint256)._depth (lib/forge-std/src/StdStorage.sol#141) is not in mixedCase
Function stdStorageSafe.read_bytes32(StdStorage) (lib/forge-std/src/StdStorage.sol#152-154) is not in mixedCase
Function stdStorageSafe.read_bool(StdStorage) (lib/forge-std/src/StdStorage.sol#156-161) is not in mixedCase
Function stdStorageSafe.read_address(StdStorage) (lib/forge-std/src/StdStorage.sol#163-165) is not in mixedCase
Function stdStorageSafe.read_uint(StdStorage) (lib/forge-std/src/StdStorage.sol#167-169) is not in mixedCase
Function stdStorageSafe.read_int(StdStorage) (lib/forge-std/src/StdStorage.sol#171-173) is not in mixedCase
Constant stdStorageSafe.vm (lib/forge-std/src/StdStorage.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Contract stdStorage (lib/forge-std/src/StdStorage.sol#234-378) is not in CapWords
Parameter stdStorage.target(StdStorage,address)._target (lib/forge-std/src/StdStorage.sol#245) is not in mixedCase
Parameter stdStorage.sig(StdStorage,bytes4)._sig (lib/forge-std/src/StdStorage.sol#249) is not in mixedCase
Parameter stdStorage.sig(StdStorage,string)._sig (lib/forge-std/src/StdStorage.sol#253) is not in mixedCase
Function stdStorage.with_key(StdStorage,address) (lib/forge-std/src/StdStorage.sol#257-259) is not in mixedCase
Function stdStorage.with_key(StdStorage,uint256) (lib/forge-std/src/StdStorage.sol#261-263) is not in mixedCase
Function stdStorage.with_key(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#265-267) is not in mixedCase
Parameter stdStorage.depth(StdStorage,uint256)._depth (lib/forge-std/src/StdStorage.sol#269) is not in mixedCase
Function stdStorage.checked_write(StdStorage,address) (lib/forge-std/src/StdStorage.sol#273-275) is not in mixedCase
Function stdStorage.checked_write(StdStorage,uint256) (lib/forge-std/src/StdStorage.sol#277-279) is not in mixedCase
Function stdStorage.checked_write_int(StdStorage,int256) (lib/forge-std/src/StdStorage.sol#281-283) is not in mixedCase
Function stdStorage.checked_write(StdStorage,bool) (lib/forge-std/src/StdStorage.sol#285-292) is not in mixedCase
Function stdStorage.checked_write(StdStorage,bytes32) (lib/forge-std/src/StdStorage.sol#294-324) is not in mixedCase
Function stdStorage.read_bytes32(StdStorage) (lib/forge-std/src/StdStorage.sol#326-328) is not in mixedCase
Function stdStorage.read_bool(StdStorage) (lib/forge-std/src/StdStorage.sol#330-332) is not in mixedCase
Function stdStorage.read_address(StdStorage) (lib/forge-std/src/StdStorage.sol#334-336) is not in mixedCase
Function stdStorage.read_uint(StdStorage) (lib/forge-std/src/StdStorage.sol#338-340) is not in mixedCase
Function stdStorage.read_int(StdStorage) (lib/forge-std/src/StdStorage.sol#342-344) is not in mixedCase
Constant stdStorage.vm (lib/forge-std/src/StdStorage.sol#235) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StdStyle.vm (lib/forge-std/src/StdStyle.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES
Function StdUtils.console2_log_StdUtils(string) (lib/forge-std/src/StdUtils.sol#215-217) is not in mixedCase
Function StdUtils.console2_log_StdUtils(string,uint256) (lib/forge-std/src/StdUtils.sol#219-221) is not in mixedCase
Function StdUtils.console2_log_StdUtils(string,string) (lib/forge-std/src/StdUtils.sol#223-225) is not in mixedCase
Constant StdUtils.multicall (lib/forge-std/src/StdUtils.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StdUtils.vm (lib/forge-std/src/StdUtils.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES
Function VmSafe.eth_getLogs(uint256,uint256,address,bytes32[]) (lib/forge-std/src/Vm.sol#187-189) is not in mixedCase
Contract console (lib/forge-std/src/console.sol#4-1534) is not in CapWords
Contract console2 (lib/forge-std/src/console2.sol#9-1559) is not in CapWords
Parameter MockERC20.initialize(string,string,uint8)._name (lib/forge-std/src/mocks/MockERC20.sol#54) is not in mixedCase
Parameter MockERC20.initialize(string,string,uint8)._symbol (lib/forge-std/src/mocks/MockERC20.sol#54) is not in mixedCase
Parameter MockERC20.initialize(string,string,uint8)._decimals (lib/forge-std/src/mocks/MockERC20.sol#54) is not in mixedCase
Function MockERC20.DOMAIN_SEPARATOR() (lib/forge-std/src/mocks/MockERC20.sol#142-144) is not in mixedCase
Variable MockERC20.INITIAL_CHAIN_ID (lib/forge-std/src/mocks/MockERC20.sol#39) is not in mixedCase
Variable MockERC20.INITIAL_DOMAIN_SEPARATOR (lib/forge-std/src/mocks/MockERC20.sol#41) is not in mixedCase
Parameter MockERC721.initialize(string,string)._name (lib/forge-std/src/mocks/MockERC721.sol#62) is not in mixedCase
Parameter MockERC721.initialize(string,string)._symbol (lib/forge-std/src/mocks/MockERC721.sol#62) is not in mixedCase
Contract safeconsole (lib/forge-std/src/safeconsole.sol#6-13248) is not in CapWords
Parameter safeconsole.log.asm_0.writeString().pos_log_asm_0_writeString (lib/forge-std/src/safeconsole.sol#13200) is not in mixedCase
Parameter safeconsole.log.asm_0.writeString().w_log_asm_0_writeString (lib/forge-std/src/safeconsole.sol#13200) is not in mixedCase
Function APE.DOMAIN_SEPARATOR() (src/APE.sol#163-165) is not in mixedCase
Variable APE.INITIAL_CHAIN_ID (src/APE.sol#36) is not in mixedCase
Variable APE.INITIAL_DOMAIN_SEPARATOR (src/APE.sol#37) is not in mixedCase
Variable Oracle._ADDR_UNISWAPV3_FACTORY (src/Oracle.sol#197) is not in mixedCase
Variable Owned.OWNER (src/Owned.sol#6) is not in mixedCase
Function Staker.DOMAIN_SEPARATOR() (src/Staker.sol#203-205) is not in mixedCase
Variable Staker._WETH (src/Staker.sol#37) is not in mixedCase
Variable Staker.INITIAL_CHAIN_ID (src/Staker.sol#60) is not in mixedCase
Variable Staker.INITIAL_DOMAIN_SEPARATOR (src/Staker.sol#61) is not in mixedCase
Variable SystemControlAccess.SYSTEM_CONTROL (src/SystemControlAccess.sol#7) is not in mixedCase
Variable SystemState.TS_ISSUANCE_START (src/SystemState.sol#35) is not in mixedCase
Variable Vault._ORACLE (src/Vault.sol#42) is not in mixedCase
Function IAPE.DOMAIN_SEPARATOR() (src/interfaces/IAPE.sol#13) is not in mixedCase
Function IAPE.OWNER() (src/interfaces/IAPE.sol#15) is not in mixedCase
Function IOracle.TWAP_DURATION() (src/interfaces/IOracle.sol#37) is not in mixedCase
Function ISIR.DOMAIN_SEPARATOR() (src/interfaces/ISIR.sol#27) is not in mixedCase
Function ISystemControl.SHUTDOWN_WITHDRAWAL_DELAY() (src/interfaces/ISystemControl.sol#21) is not in mixedCase
Function IVault.TS_ISSUANCE_START() (src/interfaces/IVault.sol#44) is not in mixedCase
Parameter VaultExternal.getReservesReadOnly(mapping(address => mapping(address => mapping(int8 => SirStructs.VaultState))),Oracle,SirStructs.VaultParameters)._vaultStates (src/libraries/VaultExternal.sol#143-144) is not in mixedCase
Parameter VaultExternal.getReserves(bool,bool,mapping(address => SirStructs.CollateralState),mapping(address => mapping(address => mapping(int8 => SirStructs.VaultState))),Oracle,SirStructs.VaultParameters)._vaultStates (src/libraries/VaultExternal.sol#162-163) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "status (lib/forge-std/lib/ds-test/src/test.sol#73)" inDSTest (lib/forge-std/lib/ds-test/src/test.sol#18-592)
Redundant expression "status (lib/forge-std/src/StdCheats.sol#815)" inStdCheats (lib/forge-std/src/StdCheats.sol#639-817)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
safeconsole.slitherConstructorConstantVariables() (lib/forge-std/src/safeconsole.sol#6-13248) uses literals with too many digits:
	- CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67 (lib/forge-std/src/safeconsole.sol#7)
SaltedAddress.slitherConstructorConstantVariables() (src/libraries/SaltedAddress.sol#6-17) uses literals with too many digits:
	- _HASH_CREATION_CODE_APE = keccak256(bytes)(type()(APE).creationCode) (src/libraries/SaltedAddress.sol#7)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000000000346) >> 64 (src/libraries/TickMathPrecision.sol#17)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000000068D) >> 64 (src/libraries/TickMathPrecision.sol#18)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000000000D1B) >> 64 (src/libraries/TickMathPrecision.sol#19)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000000001A36) >> 64 (src/libraries/TickMathPrecision.sol#20)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000000346D) >> 64 (src/libraries/TickMathPrecision.sol#21)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000000068DA) >> 64 (src/libraries/TickMathPrecision.sol#22)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000000D1B4) >> 64 (src/libraries/TickMathPrecision.sol#23)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000001A368) >> 64 (src/libraries/TickMathPrecision.sol#24)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000000346D1) >> 64 (src/libraries/TickMathPrecision.sol#25)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000000068DA3) >> 64 (src/libraries/TickMathPrecision.sol#26)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000000D1B46) >> 64 (src/libraries/TickMathPrecision.sol#27)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000001A368D) >> 64 (src/libraries/TickMathPrecision.sol#28)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000000346D1A) >> 64 (src/libraries/TickMathPrecision.sol#29)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000068DA34) >> 64 (src/libraries/TickMathPrecision.sol#30)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000000D1B468) >> 64 (src/libraries/TickMathPrecision.sol#31)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000001A368D0) >> 64 (src/libraries/TickMathPrecision.sol#32)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000346D1A0) >> 64 (src/libraries/TickMathPrecision.sol#33)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000068DA341) >> 64 (src/libraries/TickMathPrecision.sol#34)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000000D1B4683) >> 64 (src/libraries/TickMathPrecision.sol#35)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x100000 != 0 (src/libraries/TickMathPrecision.sol#36)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000001A368D06) >> 64 (src/libraries/TickMathPrecision.sol#36)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x200000 != 0 (src/libraries/TickMathPrecision.sol#37)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000346D1A0C) >> 64 (src/libraries/TickMathPrecision.sol#37)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x400000 != 0 (src/libraries/TickMathPrecision.sol#38)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000068DA3419) >> 64 (src/libraries/TickMathPrecision.sol#38)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x800000 != 0 (src/libraries/TickMathPrecision.sol#39)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000000D1B46833) >> 64 (src/libraries/TickMathPrecision.sol#39)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x1000000 != 0 (src/libraries/TickMathPrecision.sol#40)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000001A368D066) >> 64 (src/libraries/TickMathPrecision.sol#40)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x2000000 != 0 (src/libraries/TickMathPrecision.sol#41)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000346D1A0D0) >> 64 (src/libraries/TickMathPrecision.sol#41)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x4000000 != 0 (src/libraries/TickMathPrecision.sol#42)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000068DA341AB) >> 64 (src/libraries/TickMathPrecision.sol#42)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x8000000 != 0 (src/libraries/TickMathPrecision.sol#43)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000000D1B468381) >> 64 (src/libraries/TickMathPrecision.sol#43)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x10000000 != 0 (src/libraries/TickMathPrecision.sol#44)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000001A368D07AF) >> 64 (src/libraries/TickMathPrecision.sol#44)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x20000000 != 0 (src/libraries/TickMathPrecision.sol#45)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000346D1A120E) >> 64 (src/libraries/TickMathPrecision.sol#45)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x40000000 != 0 (src/libraries/TickMathPrecision.sol#46)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000068DA342ED9) >> 64 (src/libraries/TickMathPrecision.sol#46)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x80000000 != 0 (src/libraries/TickMathPrecision.sol#47)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000000D1B46888A4) >> 64 (src/libraries/TickMathPrecision.sol#47)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x100000000 != 0 (src/libraries/TickMathPrecision.sol#48)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x1000001A368D1BD10) >> 64 (src/libraries/TickMathPrecision.sol#48)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x200000000 != 0 (src/libraries/TickMathPrecision.sol#49)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000346D1A62940) >> 64 (src/libraries/TickMathPrecision.sol#49)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x400000000 != 0 (src/libraries/TickMathPrecision.sol#50)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x10000068DA3570F02) >> 64 (src/libraries/TickMathPrecision.sol#50)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x800000000 != 0 (src/libraries/TickMathPrecision.sol#51)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = (ratioX64 * 0x100000D1B46D9100A) >> 64 (src/libraries/TickMathPrecision.sol#51)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x1000000000 != 0 (src/libraries/TickMathPrecision.sol#52)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x2000000000 != 0 (src/libraries/TickMathPrecision.sol#53)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x4000000000 != 0 (src/libraries/TickMathPrecision.sol#54)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x8000000000 != 0 (src/libraries/TickMathPrecision.sol#55)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x10000000000 != 0 (src/libraries/TickMathPrecision.sol#56)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x20000000000 != 0 (src/libraries/TickMathPrecision.sol#57)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x40000000000 != 0 (src/libraries/TickMathPrecision.sol#58)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x80000000000 != 0 (src/libraries/TickMathPrecision.sol#59)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x100000000000 != 0 (src/libraries/TickMathPrecision.sol#60)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x200000000000 != 0 (src/libraries/TickMathPrecision.sol#61)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x400000000000 != 0 (src/libraries/TickMathPrecision.sol#62)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x800000000000 != 0 (src/libraries/TickMathPrecision.sol#63)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x1000000000000 != 0 (src/libraries/TickMathPrecision.sol#64)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x2000000000000 != 0 (src/libraries/TickMathPrecision.sol#65)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x4000000000000 != 0 (src/libraries/TickMathPrecision.sol#66)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x8000000000000 != 0 (src/libraries/TickMathPrecision.sol#67)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x10000000000000 != 0 (src/libraries/TickMathPrecision.sol#68)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x20000000000000 != 0 (src/libraries/TickMathPrecision.sol#69)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x40000000000000 != 0 (src/libraries/TickMathPrecision.sol#70)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x80000000000000 != 0 (src/libraries/TickMathPrecision.sol#71)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x100000000000000 != 0 (src/libraries/TickMathPrecision.sol#72)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x200000000000000 != 0 (src/libraries/TickMathPrecision.sol#73)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x400000000000000 != 0 (src/libraries/TickMathPrecision.sol#74)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x800000000000000 != 0 (src/libraries/TickMathPrecision.sol#75)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- tickX42 & 0x1000000000000000 != 0 (src/libraries/TickMathPrecision.sol#76)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = 0x100000000000001A3 (src/libraries/TickMathPrecision.sol#16)
TickMathPrecision.getRatioAtTick(int64) (src/libraries/TickMathPrecision.sol#11-83) uses literals with too many digits:
	- ratioX64 = 0x10000000000000000 (src/libraries/TickMathPrecision.sol#16)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
ERC1155 (lib/solmate/src/tokens/ERC1155.sol#6-233) does not implement functions:
	- ERC1155.uri(uint256) (lib/solmate/src/tokens/ERC1155.sol#43)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unimplemented-functions
INFO:Detectors:
The following unused import(s) in src/APE.sol should be removed:
	-import "forge-std/Test.sol"; (src/APE.sol#12)
The following unused import(s) in src/Vault.sol should be removed:
	-import {ISIR} from "./interfaces/ISIR.sol"; (src/Vault.sol#5)

	-import "forge-std/console.sol"; (src/Vault.sol#21)

	-import {SystemConstants} from "./libraries/SystemConstants.sol"; (src/Vault.sol#14)

	-import {FullMath} from "./libraries/FullMath.sol"; (src/Vault.sol#11)
The following unused import(s) in src/Oracle.sol should be removed:
	-import "forge-std/Test.sol"; (src/Oracle.sol#14)

	-import {TickMathPrecision} from "./libraries/TickMathPrecision.sol"; (src/Oracle.sol#9)
The following unused import(s) in src/SIR.sol should be removed:
	-import "forge-std/console.sol"; (src/SIR.sol#10)

	-import {Vault} from "./Vault.sol"; (src/SIR.sol#5)
The following unused import(s) in src/SystemControl.sol should be removed:
	-import {SIR} from "./SIR.sol"; (src/SystemControl.sol#6)
The following unused import(s) in src/SystemState.sol should be removed:
	-import "forge-std/Test.sol"; (src/SystemState.sol#9)
The following unused import(s) in src/TEA.sol should be removed:
	-import "forge-std/Test.sol"; (src/TEA.sol#18)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-imports
INFO:Detectors:
DSTest.IS_TEST (lib/forge-std/lib/ds-test/src/test.sol#38) should be constant 
Staker.name (src/Staker.sol#40) should be constant 
Staker.symbol (src/Staker.sol#41) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:. analyzed (71 contracts with 94 detectors), 773 result(s) found
